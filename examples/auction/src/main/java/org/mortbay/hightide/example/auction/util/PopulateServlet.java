//========================================================================
//Copyright 2006 Webtide LLC
//------------------------------------------------------------------------
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//http://www.apache.org/licenses/LICENSE-2.0
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//========================================================================

package org.mortbay.hightide.example.auction.util;

import java.io.IOException;
import java.sql.Connection;
import java.sql.Statement;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


public class PopulateServlet extends HttpServlet
{
    String dropSql = "DROP TABLE bids";
    String dropSql1 = "DROP TABLE auctionitem";
    String dropSql2 = "DROP TABLE seller";
    String dropSql3 = "DROP TABLE category";
    String dropSql4 = "DROP TABLE bidders";

    String sql = "CREATE TABLE category (" +
            "id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1), " + // Derby
//            "id serial, " + // MySQL or Postgresql
            "categoryName varchar(150), " +
            "description varchar(255), " +
            "PRIMARY KEY (id))";
    String sqlInsert = "INSERT INTO category " +
            "(id, categoryName, description) VALUES " +
            "(1,'Arts and Crafts','Original artworks'), " +
            "(2,'Jewelry, Gems and Watches','Jewelry ,gems and different brands of watches'), " +
            "(3,'Computers','Brand new and latest models'), " +
            "(4,'Antiques and Collectibles','Rare collectible items'), " +
            "(5,'Books, Movies and Music','Rare to find items'), " +
            "(6,'Clothing and Accessories','Brand new signature items'), " +
            "(7,'Coins and Stamps','Rare coin and stamp collections')";
    String sql2 = "CREATE TABLE seller (" +
            " id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1)," + // Derby
//            " id serial," + // MySQL or Postgresql
            " name varchar(100) , " +
            " username varchar(100) ," +
            " password varchar(100) ," +
            " address varchar(255) ," +
            " memberSince date ," +
            " status varchar(25)," +
            " PRIMARY KEY  (id))";
    String sqlInsert2 = "INSERT INTO seller " +
            "(id, name, username, password, address, memberSince, status) VALUES " +
            "(1,'The Auction Authority','auctionco','thesame','New York, New York','2000-01-01','Active'), " +
            "(2,'Auction R Us','username','password','Houston, Texas','2001-02-02','Active'), " +
            "(3,'Bidding Co.','bidco','passco','Vallejo, California','2000-04-01','Active')";
    String sql3 = "CREATE TABLE auctionitem (" +
            " id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1)," + // Derby
//            " id serial," + // MySQL or Postgresql
            " itemName varchar(200),  " +
            " sellerId INTEGER NOT NULL," +
            " categoryId INTEGER NOT NULL," +
            " description varchar(255)," +
            " initialPrice double precision, " +
            " PRIMARY KEY  (id))";
    String sqlInsert3 = "INSERT INTO auctionitem " +
            "(id, itemName, sellerId, categoryId, description, initialPrice) VALUES " +
            "(1,'Mona Lisa',1,1,'Original painting by Leonardo da Vinci',2000000), " +
            "(2,'Gold Necklace',2,2,'24k gold with diamond pendant',400.5), " +
            "(3,'Sony Vaio',3,3,'Intel Centrino Duo w/ 1GB RAM. 15.4 inch display',2000), " +
            "(4,'Antique Dining Table',1,4,'Antique dining table from the 18th century',15000), " +
            "(5,'Oil on canvas',3,1,'Abstract oil painting on canvas',1000), " +
            "(6,'Dick Tracy Movie Storybook',2,5,'Dick Tracy storybook by Justine Korman',150), " +
            "(7,'1001 Magic Tricks',2,5,'A collection of different street magic tricks',100), " +
            "(8,'Authentic Leather Jacket',1,6,'Authentic leather jacket',80), " +
            "(9,'Vintage 501 Jeans',1,6,'Vintage 501 jeans',200), " +
            "(10,'Huge Collection of coins',2,7,'Different coins from all over the world',2000), " +
            "(11,'19th Century Unused Stamps',2,7,'19th Century Unused Stamps',2000), " +
            "(12,'Apple Macbook Pro',3,3,'Apple MacBook Pro 2.0GHz Intel Core Duo',2500), " +
            "(13,'ProTrek Titanium Watch',2,2,'ProTrek Titanium Triple Sensor Watch',150)";
    String sql4 = "CREATE TABLE bids (" +
            " id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1)," + // Derby
//            " id serial," + // MySQL or Postgresql
            " itemId INTEGER, " +
            " bidder varchar(200), " +
            " amount double precision, " +
            " PRIMARY KEY (id))";

    String sql5="CREATE TABLE bidders (" +
            " id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1), "+ // Derby
//            " id serial, "+ // MySQL or Postgresql
            " username varchar (200), " +
            " PRIMARY KEY(id)) ";


    public void init(ServletConfig config) throws ServletException
    {
        super.init(config);
        doSetup();
    }


    public void doPost(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException
    {

    }

    public void doGet(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException
    {

    }


    private void doSetup()
    {


        Statement stmt = null;
        Connection conn = null;

        try
        {
            //make sure its gone
            doTearDown();


            conn = DBUtil.getDatasource().getConnection();
            stmt = conn.createStatement();

            stmt.execute(sql);
            stmt.executeUpdate(sqlInsert);

            stmt.execute(sql2);
            stmt.executeUpdate(sqlInsert2);

            stmt.execute(sql3);
            stmt.executeUpdate(sqlInsert3);

            stmt.execute(sql4);

            stmt.execute(sql5);

            conn.commit();
        } catch (Exception e)
        {
            e.printStackTrace();
        }
        finally
        {
            DBUtil.closeStatement(stmt);
            DBUtil.closeConnection(conn);
        }
    }

    public void doTearDown ()
    {

        Statement stmt = null;
        Connection conn = null;

        try
        {
            conn = DBUtil.getDatasource().getConnection();
            stmt = conn.createStatement();

            try
            {
                stmt.execute(dropSql);
            }
            catch (Exception e)
            {

            }

            try
            {
                stmt.execute(dropSql1);
            }
            catch (Exception e)
            {

            }

            try
            {
                stmt.execute(dropSql2);
            }
            catch (Exception e)
            {

            }

            try
            {
                stmt.execute(dropSql3);
            }
            catch (Exception e)
            {
            }

            try
            {
                stmt.execute(dropSql4);
            }
            catch (Exception e)
            {

            }

        }
        catch (Exception e)
        {
            if ((e instanceof IllegalStateException) && (e.getMessage().startsWith("Shutdown in progress")))
                ;//ignore Atomikos error for now
        }
        finally
        {
            DBUtil.closeStatement(stmt);
            DBUtil.closeConnection(conn);
        }
    }

}
